"""Initial migration

Revision ID: 3e77041af08c
Revises: 
Create Date: 2024-08-12 14:46:41.366385

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3e77041af08c' # idetifier for this script
down_revision = None # identifier for previous migration
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # defines the changes to apply to the database schema when the migration is applied.
    op.create_table('book',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=128), nullable=False),
    sa.Column('author', sa.String(length=128), nullable=False),
    sa.Column('isbn', sa.String(length=128), nullable=False),
    sa.Column('publication_date', sa.Date(), nullable=True),
    sa.Column('genre', sa.String(length=100), nullable=True),
    sa.Column('cover_image', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    ) # Creates the book table with columns 
    with op.batch_alter_table('book', schema=None) as batch_op: # Creates indexes on the author, isbn, and title columns i
        batch_op.create_index(batch_op.f('ix_book_author'), ['author'], unique=False)
        batch_op.create_index(batch_op.f('ix_book_isbn'), ['isbn'], unique=False)
        batch_op.create_index(batch_op.f('ix_book_title'), ['title'], unique=False)

    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)

    op.create_table('shelf',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_shelf_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_book',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('shelf_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], name='fk_user_book_book_id'),
    sa.ForeignKeyConstraint(['shelf_id'], ['shelf.id'], name='fk_user_book_shelf_id'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_user_book_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # reverses the changes made in the upgrade() function, effectively "undoing" the migration.
    op.drop_table('user_book')
    op.drop_table('shelf')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    with op.batch_alter_table('book', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_book_title'))
        batch_op.drop_index(batch_op.f('ix_book_isbn'))
        batch_op.drop_index(batch_op.f('ix_book_author'))

    op.drop_table('book')
    # ### end Alembic commands ###
